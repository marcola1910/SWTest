/* Demonstration of embedding CodeMirror in a bigger application. The
* interface defined here is a mess of prompts and confirms, and
* should probably not be used in a real project.
*/
//var CodeMirrorUI = Class.create();

function CodeMirrorUI(place, options, mirrorOptions) {
  this.initialize(place, options, mirrorOptions);
}

var searchNm = "Search";
var undoNm = "Undo";
var redoNm = "Redo";
var fullscreenNm = "Fullscreen";
var closeNm = "Close";
var jumpNm = "Jump to line #";

CodeMirrorUI.prototype = {

  initialize: function(textarea, options, mirrorOptions) {
    var defaultOptions = {
      searchMode: 'inline', // other options are 'inline' and 'dialog'.  The 'dialog' option needs work.
      imagePath: '/common/codemirror/images',
      path: 'js',
      buttons: ['search', 'undo', 'redo', 'fullscreen','jump'],
      saveCallback: function() {},
    }
    this.textarea = textarea
    this.options = options;
    this.setDefaults(this.options, defaultOptions);
    
    
    
    this.buttonDefs = {
      'save': ["Save", "save",  this.save],
      'search': [searchNm, "find_replace_popup", this.find_replace_popup],
      'searchClose': [closeNm, "find_replace_popup_close",  this.find_replace_popup_close],
      'searchDialog': ["Search/Replace", "find_replace_window",  this.find_replace_window],
      'undo': [undoNm, "undo",  this.undo],
      'redo': [redoNm, "redo",  this.redo],
      'jump': [jumpNm, "jump",  this.jump],
      'fullscreen': [fullscreenNm, "fullscreen", this.full_screen]
    };

    //place = CodeMirror.replace(place)

    this.home = document.createElement("div");
    //console.log(this.textarea.parentNode.parentNode + ":::");
    //this.textarea.parentNode.insertBefore(this.home, this.textarea);
    var webedit = document.getElementById('webedit');
    webedit.className = "webbox";
    
    //problem.jsp의 webedit id가 있는 경우 해당 div 태그로 append함.    
    if (webedit != null) webedit.appendChild(this.home);
    else this.textarea.parentNode.insertBefore(this.home, this.textarea);

    this.self = this;

    var onChange = this.editorChanged.cmuiBind(this);
    // preserve custom onChange handler
    if (mirrorOptions.onChange) {
        mirrorOptions.oldOnChange = mirrorOptions.onChange;
        mirrorOptions.onChange = function() {
            mirrorOptions.oldOnChange();
            onChange();
        }
    } else {
        mirrorOptions.onChange = onChange;
    }
    mir = CodeMirror.fromTextArea(this.textarea, mirrorOptions);
    //console.log(mir);
    this.mirror = mir;
    this.initButtons();

    //this.initWordWrapControl(); // CodeMirror v2 does not support word wrapping

    if (this.options.searchMode == 'inline') {
      this.initFindControl();
    } else if (this.options.searchMode == 'popup') {
      this.initPopupFindControl();
    }

    //if (this.saveButton) this.addClass(this.saveButton,'inactive');
    //if (this.undoButton) this.addClass(this.undoButton,'inactive');
    //if (this.redoButton) this.addClass(this.redoButton,'inactive');	
    
    document.onkeydown = function(event) {
    						var evtTarget = event.target;
    						var target = document.getElementById(fullscreenNm);
				    		if (evtTarget.type == 'textarea' && event.keyCode == 27) { //ESC 버튼 선택시
				    			if(target.className == "mirror_full_on") {
				    				target.className = "mirror_full_off";
				    				document.getElementById('webedit').className = "webbox";
				    			}
				    		} else if (evtTarget.type == 'textarea' && event.keyCode == 122) { // F11버튼 선택시
				    			if(target.className == "mirror_full_off") {
				    	      		target.className = "mirror_full_on";
				    	      		document.getElementById('webedit').className = "webbox_full";
				    			} else if(target.className == "mirror_full_on") {
				    				target.className = "mirror_full_off";
				    				document.getElementById('webedit').className = "webbox";
				    			}
				    		}
    					}.cmuiBind(this);
  },
  setDefaults: function(object, defaults) {
    for (var option in defaults) {
      if (!object.hasOwnProperty(option))
        object[option] = defaults[option];
    }
  },
  toTextArea: function() {
    this.home.parentNode.removeChild(this.home);
    this.mirror.toTextArea();
  },
  initButtons: function() {
    this.buttonFrame = document.createElement("div");
    this.buttonFrame.className = "codemirror-ui-clearfix codemirror-ui-button-frame";
    this.home.appendChild(this.buttonFrame);
    for (var i = 0; i < this.options.buttons.length; i++) {
      var buttonId = this.options.buttons[i];
      var buttonDef = this.buttonDefs[buttonId];
      this.addButton(buttonDef[0], buttonDef[1], buttonDef[2], this.buttonFrame);
    }

    //this.makeButton("Search", "search");
    //this.makeButton("Replace", "replace");
    //this.makeButton("Current line", "line");
    //this.makeButton("Jump to line", "jump");
    //this.makeButton("Insert constructor", "macro");
    //this.makeButton("Indent all", "reindent");
  },
  /*
   * This is left over from the MirrorFrame demo.
   * Get rid of it quick.
   */
  /*
   makeButton : function(name, action){
   var button = document.createElement("input");
   button.type = "button";
   button.value = name;
   this.home.appendChild(button);
   button.onclick = function(){
   self[action].call(self);
   };
   },
   */
  createFindBar: function() {
    var findBar = document.createElement("div");
    findBar.className = "codemirror-ui-find-bar";

    this.findString = document.createElement("input");
    this.findString.className = "filein";
    this.findString.type = "text";
    this.findString.className = "filein";
    this.findString.size = 8;

    this.findButton = document.createElement("input");
    this.findButton.type = "button";
    this.findButton.className = "btnsearch";
    this.findButton.value = "Find";
    this.findButton.onclick = function(){this.find()}.cmuiBind(this);

    this.connect(this.findString, "keyup", function(e){ 
      var code = e.keyCode;
      if (code == 13){
        this.find(this.mirror.getCursor(false)) 
      }
      /* Enter 키 입력시에만 search하도록 처리함 */
//      else{
//        if(!this.findString.value == ""){
//          this.find(this.mirror.getCursor(true))
//        } 
//      }
      this.findString.focus();
      
    }.cmuiBind(this) );

    var regLabel = document.createElement("label");
    regLabel.title = "Regular Expressions"
    this.regex = document.createElement("input");
    this.regex.type = "checkbox"
    this.regex.className = "codemirror-ui-checkbox"
    regLabel.appendChild(this.regex);
    regLabel.appendChild(document.createTextNode("RegEx"));

    var caseLabel = document.createElement("label");
    caseLabel.title = "Case Sensitive"
    this.caseSensitive = document.createElement("input");
    this.caseSensitive.type = "checkbox"
    this.caseSensitive.className = "codemirror-ui-checkbox"
    caseLabel.appendChild(this.caseSensitive);
    caseLabel.appendChild(document.createTextNode("A/a"));

    this.replaceString = document.createElement("input");
    this.replaceString.type = "text";
    this.replaceString.className = "filein";
    this.replaceString.size = 8;

    this.connect(this.replaceString, "keyup", function(e){ 
      var code = e.keyCode;
      if (code == 13){
        this.replace()
      }
    }.cmuiBind(this) );

    this.replaceButton = document.createElement("input");
    this.replaceButton.type = "button";
    this.replaceButton.className = "btnsearch";
    this.replaceButton.value = "Replace";
    this.replaceButton.onclick = this.replace.cmuiBind(this);

    var replaceAllLabel = document.createElement("label");
    replaceAllLabel.title = "Replace All"
    this.replaceAll = document.createElement("input");
    this.replaceAll.type = "checkbox"
    this.replaceAll.className = "codemirror-ui-checkbox"
    replaceAllLabel.appendChild(this.replaceAll);
    replaceAllLabel.appendChild(document.createTextNode("All"));

    findBar.appendChild(this.findString);
    findBar.appendChild(this.findButton);
    findBar.appendChild(caseLabel);
    findBar.appendChild(regLabel);

    findBar.appendChild(this.replaceString);
    findBar.appendChild(this.replaceButton);
    findBar.appendChild(replaceAllLabel);
    return findBar;
  },
  initPopupFindControl: function() {
    var findBar = this.createFindBar();

    this.popupFindWrap = document.createElement("div");
    this.popupFindWrap.className = "codemirror-ui-popup-find-wrap";

    this.popupFindWrap.appendChild(findBar);

//    var buttonDef = this.buttonDefs['searchClose'];
//    this.addButton(buttonDef[0], buttonDef[1], buttonDef[2], this.popupFindWrap);
    
    this.buttonFrame.appendChild(this.popupFindWrap);
    //document.getElementById("textSourceDiv").appendChild(this.popupFindWrap);
  },
  initFindControl: function() {
    var findBar = this.createFindBar();
    this.buttonFrame.appendChild(findBar);
  },
  find: function( start ) {
    var isCaseSensitive = this.caseSensitive.checked;
    if(start == null){
      start = this.mirror.getCursor();
    }
    var findString = this.findString.value;
    if (findString == null || findString == '') {
      alert('You must enter something to search for.');
      return;
    }
    if (this.regex.checked) {
      findString = new RegExp(findString, !isCaseSensitive ? "i" : "");
    }

    this.cursor = this.mirror.getSearchCursor(findString, start, !isCaseSensitive );
    var found = this.cursor.findNext();
    if (found) {
      this.mirror.setSelection(this.cursor.from(),this.cursor.to())
      //this.cursor.select();
    } else {
      if (confirm("No more matches.  Should we start from the top?")) {
        this.cursor = this.mirror.getSearchCursor(findString, 0, !isCaseSensitive);
        found = this.cursor.findNext();
        if (found) {
          this.mirror.setSelection(this.cursor.from(),this.cursor.to())
          //this.cursor.select();
        } else {
          alert("No matches found.");
        }
      }
    }
  },
  replace: function() {
  	var findString = this.findString.value,
  	replaceString = this.replaceString.value,
  	isCaseSensitive = this.caseSensitive.checked,
  	isRegex = this.regex.checked,
  	regFindString = isRegex ? new RegExp(findString, !isCaseSensitive ? "i" : "") : "";

    if (this.replaceAll.checked) {
      var cursor = this.mirror.getSearchCursor(isRegex ? regFindString : findString, 0, !isCaseSensitive);
      while (cursor.findNext())
        this.mirror.replaceRange(
            isRegex ? cursor.pos.match[0].replace(regFindString, replaceString) : replaceString
            ,cursor.from(),cursor.to());
        //cursor.replace(this.replaceString.value);
    } else {
      this.mirror.replaceRange(
        isRegex ? this.cursor.pos.match[0].replace(regFindString, replaceString) : replaceString
        ,this.cursor.from(),this.cursor.to())
      //this.cursor.replace(this.replaceString.value);
      this.find();
    }
  },
  initWordWrapControl: function() {
    var wrapDiv = document.createElement("div");
    wrapDiv.className = "codemirror-ui-wrap"

    var label = document.createElement("label");

    this.wordWrap = document.createElement("input");
    this.wordWrap.type = "checkbox"
    this.wordWrap.checked = true;
    label.appendChild(this.wordWrap);
    label.appendChild(document.createTextNode("Word Wrap"));
    this.wordWrap.onchange = this.toggleWordWrap.cmuiBind(this);
    wrapDiv.appendChild(label);
    this.buttonFrame.appendChild(wrapDiv);
  },
  toggleWordWrap: function() {
    if (this.wordWrap.checked) {
      this.mirror.setTextWrapping("nowrap");
    } else {
      this.mirror.setTextWrapping("");
    }
  },
  addButton: function(name, action,func, frame) {
	var span = document.createElement("span");
    var button = document.createElement("a");
    button.id = name;
    
    var p = "<p style='z-index: 10' class='hide'>" + name + "</p";
    button.innerHTML = p;
    
    span.style.float = "left";
    
    //button.href = "#";
    //button.className = "codemirror-ui-button " + action;
    //button.style.backgroundImage = "url('" + image + "')";
    //button.style.backgroundRepeat = "no-repeat";
    switch(name) {
    	case searchNm :
    			button.className = "mirror_search_off";
    		break;
    	case undoNm :
    		button.className = "mirror_pre";
    		break;
    	case redoNm  :
    		button.className = "mirror_next";
    		break;	
    	case fullscreenNm   :
    		button.className = "mirror_full_off";
    		break;	
    	case jumpNm   :
    		button.className = "mirror_all";
    		break;	
    }
    
    //button.title = name;
    button.func = func.cmuiBind(this);
    button.onclick = function(event) {
      //alert(event.target);
      
      //normalize for IE
      event = event ? event : window.event;
      if (typeof event.target == 'undefined') {
        var target = event.srcElement;
      } else {
      	var target = event.target;
      	
      	if(target.className == "mirror_search_off") {
      		target.className = "mirror_search_on";
      		target.func = this.find_replace_popup.cmuiBind(this);
		} else if(target.className == "mirror_search_on") {
			target.className = "mirror_search_off";
			target.func = this.find_replace_popup_close.cmuiBind(this);
		} else if(target.className == "mirror_full_off") {
      		target.className = "mirror_full_on";
      		target.func = this.full_screen.cmuiBind(this);
		} else if(target.className == "mirror_full_on") {
			target.className = "mirror_full_off";
			target.func = this.full_screen.cmuiBind(this);
		}
		
      }
      target.func();
      return false;
      //this.self[action].call(this);
      //eval("this."+action)();
    }.cmuiBind(this, func);
//    var img = document.createElement("img");
//    img.src = image;
//    //img.border = 0;
//    img.func = func.cmuiBind(this);
//    button.appendChild(img);
    
    span.appendChild(button);
    frame.appendChild(span);
    
    if (action == 'save') {
      this.saveButton = button;
    }
    if (action == 'undo') {
      this.undoButton = button;
    }
    if (action == 'redo') {
      this.redoButton = button;
    }
  },
  classNameRegex: function(className) {
    var regex = new RegExp("(.*) *" + className + " *(.*)");
    return regex;
  },
  addClass: function(element, className) {
    if (!element.className.match(this.classNameRegex(className))) {
       element.className += " " + className;
    }
  },
  removeClass: function(element, className) {
    if (element && element.className) {
      var m = element.className.match(this.classNameRegex(className))
      if (m) {
        element.className = m[1] + " " + m[2];
      }
    }
  },
  editorChanged: function() {
    if(!this.mirror) {
      return
    }
    var his = this.mirror.historySize();
//    if (his['undo'] > 0) {
//      this.removeClass(this.saveButton, 'inactive');
//      this.removeClass(this.undoButton, 'inactive');
//    } else {
//      this.addClass(this.saveButton, 'inactive');
//      this.addClass(this.undoButton, 'inactive');
//    }
//    if (his['redo'] > 0) {
//      this.removeClass(this.redoButton, 'inactive');
//    } else {
//      this.addClass(this.redoButton, 'inactive');
//    }
    //alert("undo size = " + his['undo'] + " and redo size = " + his['redo']);
  },
  save: function() {
    this.options.saveCallback();
    this.addClass(this.saveButton, 'inactive');
  },
  getValue: function() {
	var returnVal = this.mirror.getValue();
	//console.log("getValue :: " + returnVal) ;
	return returnVal;  
  },
  undo: function() {
    this.mirror.undo();
  },
  redo: function() {
    this.mirror.redo();
  },
  replaceSelection: function(newVal) {
    this.mirror.replaceSelection(newVal);
    this.searchWindow.focus();
  },
  raise_search_window: function() {
    //alert('raising window!');
    this.searchWindow.focus();
  },
  find_replace_window: function() {
    if (this.searchWindow == null) {
      this.searchWindow = window.open(this.options.path + "find_replace.html", "mywindow", "scrollbars=1,width=400,height=350,modal=yes");
      this.searchWindow.codeMirrorUI = this;
    }
    this.searchWindow.focus();
  },
  find_replace_popup: function() {
    //alert('Hello!');
    this.popupFindWrap.className = "codemirror-ui-popup-find-wrap active";
    this.findString.focus();
  },
  find_replace_popup_close: function() {
    //alert('Hello!');
    this.popupFindWrap.className = "codemirror-ui-popup-find-wrap";
  },
  /*
   find_replace: function(){
   this.find_replace = document.createElement("div");
   this.find_replace.className = "codemirror-search-replace";
   this.find_replace.innerHTML = "Just a test!";
   this.home.appendChild(this.find_replace);
   },

   search: function(){
   var text = prompt("Enter search term:", "");
   if (!text)
   return;

   var first = true;
   do {
   var cursor = this.mirror.getSearchCursor(text, first);
   first = false;
   while (cursor.findNext()) {
   cursor.select();
   if (!confirm("Search again?"))
   return;
   }
   }
   while (confirm("End of document reached. Start over?"));
   },

   replace: function(){
   // This is a replace-all, but it is possible to implement a
   // prompting replace.
   var from = prompt("Enter search string:", ""), to;
   if (from)
   to = prompt("What should it be replaced with?", "");
   if (to == null)
   return;

   var cursor = this.mirror.getSearchCursor(from, false);
   while (cursor.findNext())
   cursor.replace(to);
   },
   */
  jump: function() {
    var line = prompt("Jump to line:", "");
    if (line && !isNaN(Number(line))) {
      this.mirror.setCursor(Number(line)-1,0);
      this.mirror.setSelection({line:Number(line)-1,ch:0},{line:Number(line),ch:0});
      this.mirror.focus();
    }
  },
  /*
   line: function(){
   alert("The cursor is currently at line " + this.mirror.currentLine());
   this.mirror.focus();
   },

   macro: function(){
   var name = prompt("Name your constructor:", "");
   if (name)
   this.mirror.replaceSelection("function " + name + "() {\n  \n}\n\n" + name + ".prototype = {\n  \n};\n");
   },
   */
  setOption: function (mode,lang) {
	  //console.log("setOption :: " + mode + " : " + lang);
		this.mirror.setOption(mode, lang);
  },
  setValue: function (val) {
	  //console.log("setValue :: " + val);
		this.mirror.setValue(val);
  },
  on: function(type, f) {
	this.mirror.on(type, f);
  },
  
  full_screen: function() {
	  this.mirror.setOption("fullScreen", !this.mirror.getOption("fullScreen"));
	  
	  var aside = document.getElementById('aside');
	  var btnarea = document.getElementById('btnarea');
	  
	  if (aside != null && btnarea != null) {
		  if (!this.mirror.getOption("fullScreen")) {
	      	$("#aside").show();
	      	$("#btnarea").show();
	      	document.getElementById('webedit').className = "webbox";
	      }else {
	      	$("#aside").hide();
	      	$("#btnarea").hide();
	      	document.getElementById('webedit').className = "webbox_full";
	      }
	  }
	 
	  this.mirror.focus();
  },
  reindent: function() {
    var lineCount = this.mirror.lineCount();
    for(var line = 0; line < lineCount; line++) {
      this.mirror.indentLine(line);
    }
  },
  about : function() {
    string = "CodeMirror-UI was written by Jeremy Green (http://www.octolabs.com/) as a light interface around CodeMirror by Marijn Haverbeke (http://codemirror.net)."
    string += "\n\n"
    string += "Documentation and the code can be found at https://github.com/jagthedrummer/codemirror-ui/."
    alert(string);
  },
  reindentSelection: function() {
    var cur = this.mirror.getCursor()
    //console.log(cur)
    var start = this.mirror.getCursor(true)["line"]
    var end = this.mirror.getCursor(false)["line"]
    for(var line = start; line <= end; line++) {
      this.mirror.indentLine(line);
    }
    //this.mirror.reindentSelection();

  },
  // Event handler registration. If disconnect is true, it'll return a
  // function that unregisters the handler.
  // Borrowed from CodeMirror + modified
  connect: function (node, type, handler, disconnect) {
    /*function wrapHandler(event) {
      handler(new Event(event || window.event));
    }*/

    if (typeof node.addEventListener == "function") {
      node.addEventListener(type, handler, false);
      if (disconnect)
        return function() {
          node.removeEventListener(type, handler, false);
        };
    } else {
      node.attachEvent("on" + type, handler);
      if (disconnect)
        return function() {
          node.detachEvent("on" + type, handler);
        };
    }
  }
};

/*
 * This makes coding callbacks much more sane
 */
Function.prototype.cmuiBind = function(scope) {
  var _function = this;

  return function() {
    return _function.apply(scope, arguments);
  }
}